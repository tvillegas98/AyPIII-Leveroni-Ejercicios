!classDefinition: #AccountSummaryTest category: 'ServiciosFinancieros-Solucion'!
TestCase subclass: #AccountSummaryTest
	instanceVariableNames: 'aPortfolio anotherPortfolio anAccount anotherAccount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ServiciosFinancieros-Solucion'!

!AccountSummaryTest methodsFor: 'tests' stamp: 'TV 12/6/2021 17:59:42'!
test01SummaryOfAnEmptyAccountIsValid
	
	anAccount := ReceptiveAccount new.
	
	self assert: (AccountSummary of: anAccount) compute equals: (OrderedCollection with:	 'Balance = 0 pesos').! !

!AccountSummaryTest methodsFor: 'tests' stamp: 'TV 12/6/2021 18:03:12'!
test02SummaryOfAnAccountWithADepositIsValid
	
	anAccount := ReceptiveAccount new.
	Deposit register: 100*peso on: anAccount. 
	
	self assert: (AccountSummary of: anAccount) compute
		equals: (OrderedCollection with: 'Depósito por 100 pesos' with: 'Balance = 100 pesos').! !

!AccountSummaryTest methodsFor: 'tests' stamp: 'TV 12/6/2021 18:03:19'!
test03SummaryOfAnAccountWithAnExtraccionIsValid
	
	anAccount := ReceptiveAccount new.
	Withdraw register: 50*peso on: anAccount. 
	
	self assert: (AccountSummary of: anAccount) compute
		equals: (OrderedCollection with: 'Extracción por 50 pesos' with: 'Balance = -50 pesos').! !

!AccountSummaryTest methodsFor: 'tests' stamp: 'TV 12/6/2021 18:03:23'!
test04SummaryOfAnAccountWithATransferWithdrawIsValid
	
	anAccount := ReceptiveAccount new.
	anotherAccount  := ReceptiveAccount new.
	
	Transfer amount: 20*peso from: anAccount to: anotherAccount.
	
	self assert: (AccountSummary of: anAccount) compute
	equals: (OrderedCollection with: 'Salida por transferencia de 20 pesos' with:  'Balance = -20 pesos').! !

!AccountSummaryTest methodsFor: 'tests' stamp: 'TV 12/6/2021 18:04:13'!
test05SummaryOfAnAccountWithATransferDepositIsValid

	anAccount := ReceptiveAccount new.
	anotherAccount  := ReceptiveAccount new.
	
	Transfer amount: 30*peso from: anotherAccount to: anAccount.
	
	self assert: (AccountSummary of: anAccount) compute 
		equals: (OrderedCollection with: 'Entrada por transferencia de 30 pesos' with: 'Balance = 30 pesos').! !

!AccountSummaryTest methodsFor: 'tests' stamp: 'TV 12/6/2021 18:04:19'!
test06SummaryOfAnAccountWithMultiplesTransactionsIsValid
	
	anAccount := ReceptiveAccount new.

	Deposit register: 100*peso on: anAccount. 
	Deposit register: 100*peso on: anAccount.
	
	self assert: (AccountSummary of: anAccount) compute
		equals: (OrderedCollection 
			with: 	'Depósito por 100 pesos' 
			with: 	'Depósito por 100 pesos' 
			with: 'Balance = 200 pesos').! !

!AccountSummaryTest methodsFor: 'tests' stamp: 'TV 12/6/2021 18:05:48'!
test07SummaryOfAnEmptyPortfolioIsValid
	
	self assert: (AccountSummary of: anAccount) compute equals: (OrderedCollection with: 'Balance = 0 pesos').! !

!AccountSummaryTest methodsFor: 'tests' stamp: 'TV 12/6/2021 18:04:51'!
test08SummaryOfAPortfolioWithAnAccountHavingADepositIsValid
	
	Deposit register: 100*peso on: anAccount.
	aPortfolio add: anAccount.
 	
	self assert: (AccountSummary of: aPortfolio) compute
		equals: (OrderedCollection with: 'Depósito por 100 pesos' with: 'Balance = 100 pesos').! !

!AccountSummaryTest methodsFor: 'tests' stamp: 'TV 12/6/2021 18:04:57'!
test09SummaryOfAPortfolioWithAnAccountHavingAnExtractionIsValid
	
	Withdraw register: 50*peso on: anAccount.
	aPortfolio add: anAccount.
 	
	self assert: (AccountSummary of: aPortfolio) compute
		equals: (OrderedCollection with: 'Extracción por 50 pesos' with: 'Balance = -50 pesos').! !

!AccountSummaryTest methodsFor: 'tests' stamp: 'TV 12/6/2021 18:05:02'!
test10SummaryOfAPortfolioWithAnAccountHavingATransferWithdrawIsValid
	
	Transfer amount: 20*peso from: anAccount to: anotherAccount.
 	aPortfolio add: anAccount.	
	
	self assert: (AccountSummary of: aPortfolio) compute 
		equals: (OrderedCollection with: 'Salida por transferencia de 20 pesos' with: 'Balance = -20 pesos').! !

!AccountSummaryTest methodsFor: 'tests' stamp: 'TV 12/6/2021 18:05:07'!
test11SummaryOfAPortfolioWithAnAccountHavingATransferDepositIsValid
	
	Transfer amount: 30*peso from: anotherAccount to: anAccount.
 	aPortfolio add: anAccount.	
	
	self assert: (AccountSummary of: aPortfolio) compute 
		equals: (OrderedCollection with: 'Entrada por transferencia de 30 pesos' with: 'Balance = 30 pesos').! !

!AccountSummaryTest methodsFor: 'tests' stamp: 'TV 12/6/2021 18:05:13'!
test12SummaryOfEmptyNestedPortfoliosIsValid
	
	aPortfolio add: anotherPortfolio.
	
	self assert: (AccountSummary of: aPortfolio) compute 
		equals: (OrderedCollection with: 'Balance = 0 pesos').! !

!AccountSummaryTest methodsFor: 'tests' stamp: 'TV 12/6/2021 18:05:19'!
test13SummaryOfNestedPortfoliosWithATransactionIsValid

	Deposit register: 100*peso on: anAccount.
	
	anotherPortfolio add: anAccount.
	aPortfolio add: anotherPortfolio.
	
	self assert: (AccountSummary of: aPortfolio) compute
		equals: (OrderedCollection with: 'Depósito por 100 pesos' with: 'Balance = 100 pesos').! !

!AccountSummaryTest methodsFor: 'tests' stamp: 'TV 12/6/2021 18:05:24'!
test14SummaryOfNestedPortfoliosWithMultiplesAccountsWithTransactionsIsValid

	Deposit register: 100*peso on: anAccount.
	Withdraw register: 50*peso on: anAccount.
	
	anotherPortfolio add: anAccount.
	aPortfolio add: anotherPortfolio.
	
	self assert: (AccountSummary of: aPortfolio) compute
		equals: (OrderedCollection with: 'Depósito por 100 pesos' with: 'Extracción por 50 pesos' with: 'Balance = 50 pesos').! !

!AccountSummaryTest methodsFor: 'tests' stamp: 'TV 12/6/2021 18:05:28'!
test15SummaryOfAPortfolioWithMultiplesTypesOfAccounts
	
	Deposit register: 100*peso on: anAccount.
	Withdraw register: 50*peso on: anotherAccount.
	
	anotherPortfolio add: anotherAccount.
	aPortfolio add: anAccount.
	aPortfolio add: anotherPortfolio.
	
	self assert: (AccountSummary of: aPortfolio) compute
		equals: (OrderedCollection with: 'Depósito por 100 pesos' with: 'Extracción por 50 pesos' with: 'Balance = 50 pesos').! !


!AccountSummaryTest methodsFor: 'setUp/tearDown' stamp: 'TV 12/5/2021 18:43:41'!
setUp
	aPortfolio := Portfolio new.
	anotherPortfolio := Portfolio new.
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.! !


!classDefinition: #PortfolioTest category: 'ServiciosFinancieros-Solucion'!
TestCase subclass: #PortfolioTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ServiciosFinancieros-Solucion'!

!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:16:26'!
test01BalanceOfPortfolioWithoutAccountsIsZero

	self assert: 0 equals: Portfolio new balance! !

!PortfolioTest methodsFor: 'tests' stamp: 'LL 7/1/2021 03:27:00'!
test02BalanceOfPortfolioWithOneAccountIsAccountBalance

	| account portfolio |
	
	account := ReceptiveAccount new.
	Deposit register: 100 * peso on: account.
	portfolio := Portfolio with: account.
	
	self assert: account balance equals: portfolio balance! !

!PortfolioTest methodsFor: 'tests' stamp: 'LL 7/1/2021 03:27:06'!
test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios

	| simplePortfolioAccount simplePortfolio composedPortfolioAccount composedPortofolio |
	
	simplePortfolioAccount := ReceptiveAccount new.
	Deposit register: 100 * peso on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	composedPortfolioAccount := ReceptiveAccount new.
	Withdraw register: 50 * peso on: composedPortfolioAccount.
	composedPortofolio := Portfolio with: simplePortfolio with: composedPortfolioAccount.
	
	self assert: (composedPortfolioAccount balance + simplePortfolio balance) equals: composedPortofolio balance! !

!PortfolioTest methodsFor: 'tests' stamp: 'LL 7/1/2021 03:27:12'!
test04PortfolioWithoutAccountsHasNoRegisteredTransaction

	self deny: (Portfolio new hasRegistered: (Deposit for: 100 * peso))! !

!PortfolioTest methodsFor: 'tests' stamp: 'LL 7/1/2021 03:27:18'!
test05PortfolioHasRegisteredItsAccountsTransactions

	| account portfolio deposit |
	
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 * peso on: account.
	portfolio := Portfolio with: account.
	
	self assert: (portfolio hasRegistered: deposit)! !

!PortfolioTest methodsFor: 'tests' stamp: 'LL 7/1/2021 03:27:26'!
test06PortfolioLooksForRegisteredTransactionsRecursively

	| simplePortfolioAccount simplePortfolio composedPortfolioAccount composedPortfolio composedPortfolioAccountWithdraw simplePortfolioAccountDeposit |
	
	simplePortfolioAccount := ReceptiveAccount new.
	simplePortfolioAccountDeposit := Deposit register: 100 * peso on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	composedPortfolioAccount := ReceptiveAccount new.
	composedPortfolioAccountWithdraw := Withdraw register: 50 * peso on: composedPortfolioAccount.
	composedPortfolio := Portfolio with: simplePortfolio with: composedPortfolioAccount.
	
	self assert: (composedPortfolio hasRegistered: simplePortfolioAccountDeposit).
	self assert: (composedPortfolio hasRegistered: composedPortfolioAccountWithdraw)! !

!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:10'!
test07PortfolioHasNoTransactionWhenHasNoAccounts

	self assert: Portfolio new transactions isEmpty! !

!PortfolioTest methodsFor: 'tests' stamp: 'LL 7/1/2021 03:28:08'!
test08PortfolioTransactionsIncludesAllItsAccountsTransactions

	| account portfolio accountDeposit portfolioTransactions anotherAccountWithdraw |
	
	account := ReceptiveAccount new.
	accountDeposit := Deposit register: 100 * peso on: account.
	anotherAccountWithdraw := Withdraw register: 100 * peso on: account.
	portfolio := Portfolio with: account.
	
	portfolioTransactions := portfolio transactions.
	
	self assert: 2 equals: portfolioTransactions size.
	self assert: (portfolioTransactions includes: accountDeposit).
	self assert: (portfolioTransactions includes: anotherAccountWithdraw)! !

!PortfolioTest methodsFor: 'tests' stamp: 'LL 7/1/2021 03:28:20'!
test09PortfolioTransactionsAreCalculatedRecursively

	| simplePortfolioAccount simplePortfolio composedPortfolioAccount composedPortfolio composedPortfolioAccountWithdraw simplePortfolioAccountDeposit composedPortfolioTransactions |
	
	simplePortfolioAccount := ReceptiveAccount new.
	simplePortfolioAccountDeposit := Deposit register: 100 * peso on: simplePortfolioAccount.
	simplePortfolio := Portfolio with: simplePortfolioAccount.
	
	composedPortfolioAccount := ReceptiveAccount new.
	composedPortfolioAccountWithdraw := Withdraw register: 50 * peso on: composedPortfolioAccount.
	composedPortfolio := Portfolio with: simplePortfolio with: composedPortfolioAccount.
	
	composedPortfolioTransactions := composedPortfolio transactions.
	self assert: 2 equals: composedPortfolioTransactions size.
	self assert: (composedPortfolioTransactions includes: simplePortfolioAccountDeposit).
	self assert: (composedPortfolioTransactions includes: composedPortfolioAccountWithdraw)! !

!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:24'!
test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce

	| account portfolio |
	
	account := ReceptiveAccount new.
	portfolio := Portfolio with: account.
	
	self 
		should: [ portfolio add: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: 1 equals: portfolio accountsSize.
			self assert: (portfolio accountsIncludes: account) ]! !

!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 11:58:28'!
test11PortfolioCanNotIncludeAccountOfItsPortfolios

	| account simplePortfolio composedPortfolio |
	
	account := ReceptiveAccount new.
	simplePortfolio := Portfolio with: account.
	composedPortfolio := Portfolio with: simplePortfolio.
	
	self 
		should: [ composedPortfolio add: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: 1 equals: composedPortfolio accountsSize.
			self assert: (composedPortfolio accountsIncludes: simplePortfolio) ]! !

!PortfolioTest methodsFor: 'tests' stamp: 'LL 11/29/2021 18:55:37'!
test12PortfolioCanNotIncludeItself

	| simplePortfolio |
	
	simplePortfolio := Portfolio new.
	
	self 
		should: [ simplePortfolio add: simplePortfolio ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: 0 equals: simplePortfolio accountsSize. ]! !

!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 12:01:51'!
test13ComposedPortfolioCanNotHaveParentPortfolioAccount

	| account simplePortfolio composedPortfolio |
	
	account := ReceptiveAccount new.
	simplePortfolio := Portfolio new.
	composedPortfolio := Portfolio with: simplePortfolio.
	composedPortfolio add: account.
	
	self 
		should: [ simplePortfolio add: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: simplePortfolio accountsIsEmpty ]! !

!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/25/2019 12:12:16'!
test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively

	| account leftParentPortfolio leftRootParentPortfolio portfolio rightParentPortfolio rightRootParentPortfolio |
	
	account := ReceptiveAccount new.
	portfolio := Portfolio new.
	leftParentPortfolio := Portfolio with: portfolio .
	leftRootParentPortfolio := Portfolio with: leftParentPortfolio.
	leftRootParentPortfolio add: account.
	
	rightParentPortfolio := Portfolio with: portfolio .
	rightRootParentPortfolio := Portfolio with: rightParentPortfolio.
	rightRootParentPortfolio add: account.

	self 
		should: [ portfolio add: account ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: portfolio accountsIsEmpty ]! !

!PortfolioTest methodsFor: 'tests' stamp: 'HAW 5/29/2019 16:31:18'!
test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd

	| portfolioToAdd portfolioToModify rootPortfolio sharedAccount |
	
	sharedAccount := ReceptiveAccount new.
	portfolioToModify := Portfolio new.
	rootPortfolio := Portfolio with: sharedAccount with: portfolioToModify.
	portfolioToAdd := Portfolio with: sharedAccount.
	
	self 
		should: [ portfolioToModify add: portfolioToAdd ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError | 
			self assert: Portfolio canNotAddAccountErrorMessage equals: anError messageText.
			self assert: portfolioToModify accountsIsEmpty ]! !


!classDefinition: #ReceptiveAccountTest category: 'ServiciosFinancieros-Solucion'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ServiciosFinancieros-Solucion'!

!ReceptiveAccountTest methodsFor: 'tests' stamp: 'LL 7/1/2021 03:10:43'!
test01ReceptiveAccountHaveZeroAsBalanceWhenCreated 

	| account |
	
	account := ReceptiveAccount new.

	self assert: 0 equals: account balance
! !

!ReceptiveAccountTest methodsFor: 'tests' stamp: 'LL 7/1/2021 03:14:20'!
test02DepositIncreasesBalanceOnTransactionValue 

	| account |
	
	account := ReceptiveAccount  new.
	Deposit register: 100 * peso on: account.
		
	self assert: 100 * peso equals: account balance
! !

!ReceptiveAccountTest methodsFor: 'tests' stamp: 'LL 7/1/2021 03:14:24'!
test03WithdrawDecreasesBalanceOnTransactionValue 

	| account |
	
	account := ReceptiveAccount new.
	Deposit register: 100 * peso on: account.
	Withdraw register: 50 * peso on: account.
		
	self assert: 50 * peso equals: account balance
! !

!ReceptiveAccountTest methodsFor: 'tests' stamp: 'LL 7/1/2021 03:10:14'!
test04WithdrawValueMustBePositive 

	| account withdrawValue |
	
	account := ReceptiveAccount new.
	withdrawValue := 50 * peso.
	
	self assert: withdrawValue equals: (Withdraw register: withdrawValue on: account) value
! !

!ReceptiveAccountTest methodsFor: 'tests' stamp: 'LL 7/1/2021 03:10:22'!
test05ReceptiveAccountKnowsRegisteredTransactions 

	| account deposit withdraw |
	
	account := ReceptiveAccount new.
	deposit := Deposit register: 100 * peso on: account.
	withdraw := Withdraw register: 50 * peso on: account.
		
	self assert: (account hasRegistered: deposit).
	self assert: (account hasRegistered: withdraw).
! !

!ReceptiveAccountTest methodsFor: 'tests' stamp: 'LL 7/1/2021 03:12:14'!
test06ReceptiveAccountDoNotKnowNotRegisteredTransactions

	| account deposit withdraw |
	
	account := ReceptiveAccount new.
	deposit :=  Deposit for: 100 * peso.
	withdraw := Withdraw for: 50 * peso.
		
	self deny: (account hasRegistered: deposit).
	self deny: (account hasRegistered: withdraw).
! !

!ReceptiveAccountTest methodsFor: 'tests' stamp: 'LL 7/1/2021 03:12:23'!
test07AccountKnowsItsTransactions 

	| account deposit |
	
	account := ReceptiveAccount new.
	
	deposit := Deposit register: 50 * peso on: account.
		
	self assert: 1 equals: account transactions size.
	self assert: (account transactions includes: deposit).
! !


!classDefinition: #TransferNetTest category: 'ServiciosFinancieros-Solucion'!
TestCase subclass: #TransferNetTest
	instanceVariableNames: 'anotherPortfolio aPortfolio anAccount anotherAccount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ServiciosFinancieros-Solucion'!

!TransferNetTest methodsFor: 'setUp/tearDown' stamp: 'TV 12/5/2021 18:58:36'!
setUp
	aPortfolio := Portfolio new.
	anotherPortfolio := Portfolio new.
	anAccount := ReceptiveAccount new.
	anotherAccount := ReceptiveAccount new.! !


!TransferNetTest methodsFor: 'tests' stamp: 'TV 12/6/2021 18:07:38'!
test01AnAccountWithoutTransfersHasZeroTransferNet
	
	self assert: (TransferNet of: anAccount) compute equals: 'Neto de transferencias = 0 pesos'.! !

!TransferNetTest methodsFor: 'tests' stamp: 'TV 12/6/2021 18:07:49'!
test02DepositDoesntAffectTransferNet
	
	Deposit register: 100*peso on: anAccount.
	
	self assert: (TransferNet of: anAccount) compute equals: 'Neto de transferencias = 0 pesos'.! !

!TransferNetTest methodsFor: 'tests' stamp: 'TV 12/6/2021 18:07:55'!
test03WithdrawDoesntAffectTransferNet
	
	Withdraw register: 100*peso on: anAccount.
	
	self assert: (TransferNet of: anAccount) compute equals: 'Neto de transferencias = 0 pesos'.! !

!TransferNetTest methodsFor: 'tests' stamp: 'TV 12/6/2021 18:08:00'!
test04TransferringAnAmountAffectsTransferNet
	
	Transfer amount: 20*peso from: anAccount  to:  anotherAccount.
	
	self assert: (TransferNet of: anAccount) compute equals: 'Neto de transferencias = -20 pesos'.! !

!TransferNetTest methodsFor: 'tests' stamp: 'TV 12/6/2021 18:08:05'!
test05ReceivingAnAmountAffectsTransferNet
	
	Transfer amount: 30*peso from: anotherAccount  to:  anAccount.
	
	self assert: (TransferNet of: anAccount) compute equals: 'Neto de transferencias = 30 pesos'.! !

!TransferNetTest methodsFor: 'tests' stamp: 'TV 12/6/2021 18:11:28'!
test06MultiplesTransfersAffectsTransferNet
	
	Transfer amount: 20*peso from: anAccount to: anotherAccount.
	
	Transfer amount: 30*peso from: anotherAccount  to:  anAccount.
	
	self assert: (TransferNet of: anAccount) compute equals: 'Neto de transferencias = 10 pesos'.! !

!TransferNetTest methodsFor: 'tests' stamp: 'TV 12/6/2021 18:09:04'!
test07APortfolioWithoutTransferHasZeroTransferNet
	
	self assert: (TransferNet of: aPortfolio) compute equals: 'Neto de transferencias = 0 pesos'.! !

!TransferNetTest methodsFor: 'tests' stamp: 'TV 12/6/2021 18:10:45'!
test08ADepositDoesntAffectPortfolioTransferNet

	Deposit register: 100*peso on: anAccount.
	
	aPortfolio add: anAccount.
	
	self assert: (TransferNet of: aPortfolio) compute equals: 'Neto de transferencias = 0 pesos'.! !

!TransferNetTest methodsFor: 'tests' stamp: 'TV 12/6/2021 18:10:48'!
test09AWithdrawDoesntAffectPortfolioTransferNet

	Withdraw register: 100*peso on: anAccount.
	
	aPortfolio add: anAccount.
	
	self assert: (TransferNet of: aPortfolio) compute equals: 'Neto de transferencias = 0 pesos'.! !

!TransferNetTest methodsFor: 'tests' stamp: 'TV 12/6/2021 18:10:52'!
test10TransferringAnAmountFromAPortfolioAffectsTransferNet
	
	Transfer amount: 30*peso from: anotherAccount to: anAccount.
	
	aPortfolio add: anAccount.
	
	self assert: (TransferNet of: aPortfolio) compute equals: 'Neto de transferencias = 30 pesos'.! !

!TransferNetTest methodsFor: 'tests' stamp: 'TV 12/6/2021 18:09:44'!
test11APortfolioWithMultiplesTransfersAffectsTransferNet
	
	Transfer amount: 30*peso from: anotherAccount to: anAccount.
	Transfer amount: 30*peso from: anotherAccount to: anAccount.
	
	aPortfolio add: anAccount.
	
	self assert: (TransferNet of: aPortfolio) compute equals: 'Neto de transferencias = 60 pesos'.! !

!TransferNetTest methodsFor: 'tests' stamp: 'TV 12/6/2021 18:10:57'!
test12NestedPortfoliosWithATransactionAffectsTransferNet
	
	Transfer amount: 30*peso from: anotherAccount to: anAccount.
	
	anotherPortfolio add: anAccount.
	aPortfolio add: anotherPortfolio.
	
	self assert: (TransferNet of: aPortfolio) compute equals: 'Neto de transferencias = 30 pesos'.! !

!TransferNetTest methodsFor: 'tests' stamp: 'TV 12/6/2021 18:09:55'!
test13NestedPortfoliosWithMultiplesTransactionsAffectsTransferNet
	
	Transfer amount: 30*peso from: anotherAccount to: anAccount.
	Transfer amount: 20*peso from: anAccount to: anotherAccount.
	
	anotherPortfolio add: anAccount.
	aPortfolio add: anotherPortfolio.
	
	self assert: (TransferNet of: aPortfolio) compute equals: 'Neto de transferencias = 10 pesos'.! !


!classDefinition: #TransferTest category: 'ServiciosFinancieros-Solucion'!
TestCase subclass: #TransferTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ServiciosFinancieros-Solucion'!

!TransferTest methodsFor: 'as yet unclassified' stamp: 'LL 9/20/2020 21:07:03'!
test01ATransferDecreasesBalanceFromOriginAccountAndIncreasesItForDestinationAccount

	| destinationAccount originAccount |
	
	originAccount := ReceptiveAccount new.
	Deposit register: 10 * peso on: originAccount.
	
	destinationAccount := ReceptiveAccount new.
	Deposit register: 10 * peso on: destinationAccount.
	
	Transfer amount: 2 * peso from: originAccount to: destinationAccount.
	
	self assert: 8 * peso equals: originAccount balance.
	self assert: 12 * peso equals: destinationAccount balance.! !

!TransferTest methodsFor: 'as yet unclassified' stamp: 'LL 9/20/2020 21:12:28'!
test02ATransferKnowsItsValue

	| destinationAccount originAccount transfer |
	
	originAccount := ReceptiveAccount new.
	Deposit register: 10 * peso on: originAccount.
	
	destinationAccount := ReceptiveAccount new.
	Deposit register: 10 * peso on: destinationAccount.
	
	transfer := Transfer amount: 2 * peso from: originAccount to: destinationAccount.
	
	self assert: 2 * peso equals: transfer value.! !

!TransferTest methodsFor: 'as yet unclassified' stamp: 'LL 9/20/2020 23:01:44'!
test03DepositLegKnowsItsWithdrawCounterpart

	| destinationAccount originAccount transfer |
	
	originAccount := ReceptiveAccount new.
	Deposit register: 10 * peso on: originAccount.
	
	destinationAccount := ReceptiveAccount new.
	Deposit register: 10 * peso on: destinationAccount.
	
	transfer := Transfer amount: 2 * peso from: originAccount to: destinationAccount.
	
	self assert: transfer withdrawLeg equals: transfer depositLeg withdrawLeg! !

!TransferTest methodsFor: 'as yet unclassified' stamp: 'LL 9/20/2020 23:01:51'!
test04WithdrawLegKnowsItsDepositCounterpart

	| destinationAccount originAccount transfer |
	
	originAccount := ReceptiveAccount new.
	Deposit register: 10 * peso on: originAccount.
	
	destinationAccount := ReceptiveAccount new.
	Deposit register: 10 * peso on: destinationAccount.
	
	transfer := Transfer amount: 2 * peso from: originAccount to: destinationAccount.
	
	self assert: transfer depositLeg equals: transfer withdrawLeg depositLeg! !

!TransferTest methodsFor: 'as yet unclassified' stamp: 'LL 9/20/2020 23:02:36'!
test05OriginAndDestinationAccountsCannotBeTheSame

	| originAccount |
	
	originAccount := ReceptiveAccount new.
	Deposit register: 10 * peso on: originAccount.
	
	self should: [ Transfer amount: 2 * peso from: originAccount to: originAccount ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Transfer cannotTransferToOriginErrorDescription equals: anError messageText.
			self assert: 10 * peso equals: originAccount balance.
		]
! !

!TransferTest methodsFor: 'as yet unclassified' stamp: 'LL 9/20/2020 23:02:44'!
test06CannotTransferAZeroAmount

	| originAccount destinationAccount |
	
	originAccount := ReceptiveAccount new.
	Deposit register: 10 * peso on: originAccount.
	
	destinationAccount := ReceptiveAccount new.
	Deposit register: 5 * peso on: destinationAccount.
	
	self should: [ Transfer amount: 0 from: originAccount to: destinationAccount ]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :anError |
			self assert: Transfer cannotTransferZeroErrorDescription equals: anError messageText.
			self assert: 10 * peso equals: originAccount balance.
		]
! !


!classDefinition: #Account category: 'ServiciosFinancieros-Solucion'!
Object subclass: #Account
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ServiciosFinancieros-Solucion'!

!Account methodsFor: 'main protocol' stamp: 'HAW 5/25/2019 12:23:40'!
balance

	self subclassResponsibility ! !

!Account methodsFor: 'main protocol' stamp: 'HAW 5/25/2019 12:23:47'!
hasRegistered: aTransaction

	self subclassResponsibility ! !

!Account methodsFor: 'main protocol' stamp: 'HAW 5/25/2019 12:23:15'!
transactions

	self subclassResponsibility ! !


!Account methodsFor: 'composition' stamp: 'LL 7/8/2021 21:45:50'!
addedTo: aPortfolio

	self subclassResponsibility! !

!Account methodsFor: 'composition' stamp: 'LL 7/8/2021 21:46:48'!
isComposedBy: anAccount

	self subclassResponsibility! !


!Account methodsFor: 'private' stamp: 'HAW 5/25/2019 12:23:27'!
addTransactionsTo: aCollectionOfTransactions

	self subclassResponsibility ! !


!classDefinition: #Portfolio category: 'ServiciosFinancieros-Solucion'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ServiciosFinancieros-Solucion'!

!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 11:49:20'!
accountsIncludes: anAccount

	^accounts includes: anAccount ! !

!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 12:05:04'!
accountsIsEmpty
	
	^accounts isEmpty ! !

!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 11:49:06'!
accountsSize
	
	^accounts size! !

!Portfolio methodsFor: 'accounts management' stamp: 'HAW 5/25/2019 12:19:20'!
add: accountToAdd

	self assertCanAdd: accountToAdd.
		
	accounts add: accountToAdd.
	accountToAdd addedTo: self 
	! !


!Portfolio methodsFor: 'composition' stamp: 'HAW 5/25/2019 12:17:31'!
addRootParentsTo: rootParents

	parents 
		ifEmpty: [ rootParents add: self ] 
		ifNotEmpty: [ parents do: [ :aParent | aParent addRootParentsTo: rootParents ]]! !

!Portfolio methodsFor: 'composition' stamp: 'HAW 5/25/2019 12:02:59'!
addedTo: aPortfolio 
	
	parents add: aPortfolio ! !

!Portfolio methodsFor: 'composition' stamp: 'HAW 5/25/2019 12:20:56'!
anyRootParentIsComposedBy: accountToAdd

	^self rootParents anySatisfy: [ :aParent | aParent isComposedBy: accountToAdd]! !

!Portfolio methodsFor: 'composition' stamp: 'HAW 5/25/2019 12:20:36'!
assertCanAdd: accountToAdd

	(self anyRootParentIsComposedBy: accountToAdd) ifTrue: [ self signalCanNotAddAccount ].
! !

!Portfolio methodsFor: 'composition' stamp: 'HAW 5/29/2019 16:24:54'!
isComposedBy: anAccount

	^ self = anAccount or: [ accounts anySatisfy: [ :composedAccount | (composedAccount isComposedBy: anAccount) or: [ anAccount isComposedBy: composedAccount ]]]! !

!Portfolio methodsFor: 'composition' stamp: 'HAW 5/25/2019 12:17:31'!
rootParents
	
	| rootParents |
	
	rootParents := Set new.
	self addRootParentsTo: rootParents.
	
	^ rootParents! !

!Portfolio methodsFor: 'composition' stamp: 'HAW 5/25/2019 11:48:34'!
signalCanNotAddAccount
	
	self error: self class canNotAddAccountErrorMessage! !


!Portfolio methodsFor: 'initialization' stamp: 'HAW 5/25/2019 12:03:18'!
initialize

	accounts := OrderedCollection new.
	parents := OrderedCollection new.! !


!Portfolio methodsFor: 'main protocol' stamp: 'TV 12/5/2021 17:11:35'!
accountsDo: aBlock
	
	accounts do: aBlock.! !

!Portfolio methodsFor: 'main protocol' stamp: 'TV 12/5/2021 18:27:11'!
balance
	|balance|
	balance := 0*peso.
	
	self accountsDo: 	[ :anAccount | balance := balance + anAccount balance ].
	^balance! !

!Portfolio methodsFor: 'main protocol' stamp: 'HAW 5/25/2019 11:28:29'!
hasRegistered: aTransaction

	^accounts anySatisfy: [ :anAccount | anAccount hasRegistered: aTransaction ]! !

!Portfolio methodsFor: 'main protocol' stamp: 'HAW 5/25/2019 11:38:32'!
transactions
	
	| transactions |
	
	transactions := OrderedCollection new.
	accounts do: [ :anAccount | anAccount addTransactionsTo: transactions ].
	
	^transactions ! !

!Portfolio methodsFor: 'main protocol' stamp: 'TV 12/2/2021 23:09:23'!
transactionsDo: aBlock
	| transactions |
	transactions := self transactions.
	transactions do: aBlock.
	! !


!Portfolio methodsFor: 'private' stamp: 'HAW 5/25/2019 11:42:55'!
addTransactionsTo: aCollectionOfTransactions

	accounts do: [ :anAccount | anAccount addTransactionsTo: aCollectionOfTransactions ]! !

"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!

!classDefinition: 'Portfolio class' category: 'ServiciosFinancieros-Solucion'!
Portfolio class
	instanceVariableNames: ''!

!Portfolio class methodsFor: 'as yet unclassified' stamp: 'HAW 5/25/2019 11:48:55'!
canNotAddAccountErrorMessage
	
	^'Can not add repeated account to a portfolio'! !

!Portfolio class methodsFor: 'as yet unclassified' stamp: 'HAW 5/25/2019 11:18:21'!
with: anAccount

	^self new 
		add: anAccount;
		yourself! !

!Portfolio class methodsFor: 'as yet unclassified' stamp: 'HAW 5/25/2019 11:23:59'!
with: anAccount with: anotherAccount

	^self new 
		add: anAccount;
		add: anotherAccount;
		yourself! !


!classDefinition: #ReceptiveAccount category: 'ServiciosFinancieros-Solucion'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ServiciosFinancieros-Solucion'!

!ReceptiveAccount methodsFor: 'composition' stamp: 'HAW 5/25/2019 12:03:32'!
addedTo: aPortfolio 
	
	! !

!ReceptiveAccount methodsFor: 'composition' stamp: 'HAW 5/25/2019 11:54:51'!
isComposedBy: anAccount

	^self = anAccount ! !


!ReceptiveAccount methodsFor: 'initialization' stamp: 'HernanWilkinson 7/13/2011 18:35'!
initialize

	super initialize.
	transactions := OrderedCollection new.! !


!ReceptiveAccount methodsFor: 'main protocol' stamp: 'TV 11/29/2021 21:47:57'!
balance

	^transactions 
		inject: 0 * peso
		into: [ :currentBalance :transaction | transaction affectBalance: currentBalance ]! !

!ReceptiveAccount methodsFor: 'main protocol' stamp: 'NR 10/21/2019 18:55:56'!
hasRegistered: aTransaction

	^ transactions includes: aTransaction 
! !

!ReceptiveAccount methodsFor: 'main protocol' stamp: 'TV 12/3/2021 01:42:29'!
register: aTransaction

	transactions add: aTransaction 
! !

!ReceptiveAccount methodsFor: 'main protocol' stamp: 'HernanWilkinson 7/13/2011 18:37'!
transactions 

	^ transactions copy! !

!ReceptiveAccount methodsFor: 'main protocol' stamp: 'TV 12/2/2021 21:08:25'!
transactionsDo: aBlock

	transactions do: aBlock.! !


!ReceptiveAccount methodsFor: 'private' stamp: 'HAW 5/25/2019 11:38:52'!
addTransactionsTo: aCollectionOfTransactions

	aCollectionOfTransactions addAll: transactions ! !


!classDefinition: #AccountTransaction category: 'ServiciosFinancieros-Solucion'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ServiciosFinancieros-Solucion'!

!AccountTransaction methodsFor: 'value' stamp: 'HernanWilkinson 9/12/2011 12:25'!
value 

	self subclassResponsibility ! !


!AccountTransaction methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:25:39'!
affectBalance: aBalance

	self subclassResponsibility ! !


!AccountTransaction methodsFor: 'visitor' stamp: 'TV 12/4/2021 23:26:44'!
accept: aReportVisitor
	self subclassResponsibility.! !


!classDefinition: #Deposit category: 'ServiciosFinancieros-Solucion'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ServiciosFinancieros-Solucion'!

!Deposit methodsFor: 'initialization' stamp: 'HernanWilkinson 7/13/2011 18:45'!
initializeFor: aValue

	value := aValue ! !


!Deposit methodsFor: 'value' stamp: 'HernanWilkinson 7/13/2011 18:38'!
value

	^ value! !


!Deposit methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:25:02'!
affectBalance: aBalance

	^aBalance + value ! !


!Deposit methodsFor: 'visitor' stamp: 'TV 12/4/2021 23:24:09'!
accept: aReportVisitor
	aReportVisitor visitDeposit: self.! !

"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!

!classDefinition: 'Deposit class' category: 'ServiciosFinancieros-Solucion'!
Deposit class
	instanceVariableNames: ''!

!Deposit class methodsFor: 'instance creation' stamp: 'HernanWilkinson 7/13/2011 18:38'!
for: aValue

	^ self new initializeFor: aValue ! !


!Deposit class methodsFor: 'as yet unclassified' stamp: 'LL 7/8/2021 21:45:00'!
register: aValue on: account

	| transaction |
	
	transaction := self for: aValue.
	account register: transaction.
		
	^ transaction! !


!classDefinition: #TransferLeg category: 'ServiciosFinancieros-Solucion'!
AccountTransaction subclass: #TransferLeg
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ServiciosFinancieros-Solucion'!

!TransferLeg methodsFor: 'value' stamp: 'LL 9/20/2020 22:27:32'!
value

	^transfer value! !


!TransferLeg methodsFor: 'initialization' stamp: 'LL 9/20/2020 22:28:14'!
initializeWith: aTransfer

	transfer := aTransfer! !

"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!

!classDefinition: 'TransferLeg class' category: 'ServiciosFinancieros-Solucion'!
TransferLeg class
	instanceVariableNames: ''!

!TransferLeg class methodsFor: 'as yet unclassified' stamp: 'LL 9/20/2020 22:45:01'!
of: aTransfer on: anAccount

	| transaction |
	
	transaction := self new initializeWith: 	aTransfer.
	anAccount register: transaction.	
	
	^transaction! !


!classDefinition: #TransferDepositLeg category: 'ServiciosFinancieros-Solucion'!
TransferLeg subclass: #TransferDepositLeg
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ServiciosFinancieros-Solucion'!

!TransferDepositLeg methodsFor: 'accessing' stamp: 'LL 9/20/2020 22:26:10'!
withdrawLeg

	^transfer withdrawLeg! !


!TransferDepositLeg methodsFor: 'balance' stamp: 'LL 9/20/2020 22:27:49'!
affectBalance: aBalance

	^aBalance + self value! !


!TransferDepositLeg methodsFor: 'visitor' stamp: 'TV 12/4/2021 23:27:15'!
accept: aReportVisitor
	aReportVisitor visitTransferDepositLeg: self.! !


!classDefinition: #TransferWithdrawLeg category: 'ServiciosFinancieros-Solucion'!
TransferLeg subclass: #TransferWithdrawLeg
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ServiciosFinancieros-Solucion'!

!TransferWithdrawLeg methodsFor: 'accessing' stamp: 'LL 9/20/2020 22:25:47'!
depositLeg

	^transfer depositLeg! !


!TransferWithdrawLeg methodsFor: 'balance' stamp: 'LL 9/20/2020 22:27:55'!
affectBalance: aBalance

	^aBalance - self value! !


!TransferWithdrawLeg methodsFor: 'visitor' stamp: 'TV 12/4/2021 23:27:42'!
accept: aReportVisitor
	aReportVisitor visitTransferWithdrawLeg: self.! !


!classDefinition: #Withdraw category: 'ServiciosFinancieros-Solucion'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ServiciosFinancieros-Solucion'!

!Withdraw methodsFor: 'initialization' stamp: 'HernanWilkinson 7/13/2011 18:46'!
initializeFor: aValue

	value := aValue ! !


!Withdraw methodsFor: 'value' stamp: 'HernanWilkinson 7/13/2011 18:33'!
value

	^ value! !


!Withdraw methodsFor: 'balance' stamp: 'HAW 5/25/2019 11:25:15'!
affectBalance: aBalance

	^aBalance - value! !


!Withdraw methodsFor: 'visitor' stamp: 'TV 12/4/2021 23:32:01'!
accept: aReportVisitor
	aReportVisitor visitWithdraw: self.! !

"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!

!classDefinition: 'Withdraw class' category: 'ServiciosFinancieros-Solucion'!
Withdraw class
	instanceVariableNames: ''!

!Withdraw class methodsFor: 'instance creation' stamp: 'HernanWilkinson 7/13/2011 18:33'!
for: aValue

	^ self new initializeFor: aValue ! !


!Withdraw class methodsFor: 'as yet unclassified' stamp: 'LL 7/8/2021 21:45:05'!
register: aValue on: account

	| transaction |
	
	transaction := self for: aValue.
	account register: transaction.
		
	^ transaction! !


!classDefinition: #TransactionReport category: 'ServiciosFinancieros-Solucion'!
Object subclass: #TransactionReport
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ServiciosFinancieros-Solucion'!

!TransactionReport methodsFor: 'compute' stamp: 'TV 12/5/2021 16:33:01'!
compute
	self subclassResponsibility.! !


!TransactionReport methodsFor: 'visit' stamp: 'TV 12/5/2021 16:33:28'!
visitDeposit: aDeposit
	self subclassResponsibility.! !

!TransactionReport methodsFor: 'visit' stamp: 'TV 12/5/2021 16:33:55'!
visitTransferDepositLeg: aTransferDepositLeg
	self subclassResponsibility.! !

!TransactionReport methodsFor: 'visit' stamp: 'TV 12/5/2021 16:34:05'!
visitTransferWithdrawLeg: aTransferWithdrawLeg
	self subclassResponsibility.! !

!TransactionReport methodsFor: 'visit' stamp: 'TV 12/5/2021 16:33:38'!
visitWithdraw: aWithdraw
	self subclassResponsibility.! !


!classDefinition: #AccountSummary category: 'ServiciosFinancieros-Solucion'!
TransactionReport subclass: #AccountSummary
	instanceVariableNames: 'account summary'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ServiciosFinancieros-Solucion'!

!AccountSummary methodsFor: 'initialization' stamp: 'TV 12/2/2021 21:02:41'!
initializeOf: anAccount
	account := anAccount.
	summary := OrderedCollection new.! !


!AccountSummary methodsFor: 'visit' stamp: 'TV 12/4/2021 23:44:37'!
visitDeposit: aDeposit
	summary add: ('Depósito por ', aDeposit value asString).! !

!AccountSummary methodsFor: 'visit' stamp: 'TV 12/5/2021 00:06:34'!
visitTransferDepositLeg: aTransferDeposit

	summary add: ('Entrada por transferencia de ', aTransferDeposit value asString).! !

!AccountSummary methodsFor: 'visit' stamp: 'TV 12/5/2021 00:06:40'!
visitTransferWithdrawLeg: aTransferWithdraw

	summary add: ('Salida por transferencia de ', aTransferWithdraw value asString).! !

!AccountSummary methodsFor: 'visit' stamp: 'TV 12/4/2021 23:44:59'!
visitWithdraw: aWithdraw
	summary add: ('Extracción por ', aWithdraw value asString).! !


!AccountSummary methodsFor: 'compute' stamp: 'TV 12/5/2021 00:02:16'!
compute
	
	account transactionsDo: [:aTransaction| aTransaction accept: self].
		
	summary add: ('Balance = ', account balance asString).
	
	^summary.! !

"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!

!classDefinition: 'AccountSummary class' category: 'ServiciosFinancieros-Solucion'!
AccountSummary class
	instanceVariableNames: ''!

!AccountSummary class methodsFor: 'instance creation' stamp: 'TV 12/2/2021 21:01:39'!
of: anAccount
	^self new initializeOf: anAccount.! !


!classDefinition: #TransferNet category: 'ServiciosFinancieros-Solucion'!
TransactionReport subclass: #TransferNet
	instanceVariableNames: 'transferNet account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ServiciosFinancieros-Solucion'!

!TransferNet methodsFor: 'initialization' stamp: 'TV 12/3/2021 01:49:06'!
initializeOf: anAccount
	account := anAccount.
	transferNet := 0 * peso.! !


!TransferNet methodsFor: 'compute' stamp: 'TV 12/5/2021 00:02:02'!
compute
	account transactionsDo: [ :aTransaction| aTransaction accept: self].
	
	^('Neto de transferencias = ', transferNet asString).! !


!TransferNet methodsFor: 'visit' stamp: 'TV 12/4/2021 23:43:31'!
visitDeposit: aDeposit! !

!TransferNet methodsFor: 'visit' stamp: 'TV 12/4/2021 23:43:11'!
visitTransferDepositLeg: aTransferDeposit
	transferNet := transferNet + aTransferDeposit value.! !

!TransferNet methodsFor: 'visit' stamp: 'TV 12/4/2021 23:43:19'!
visitTransferWithdrawLeg: aTransferWithdraw
	transferNet := transferNet - aTransferWithdraw value.! !

!TransferNet methodsFor: 'visit' stamp: 'TV 12/4/2021 23:43:27'!
visitWithdraw: aWithdraw! !

"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!

!classDefinition: 'TransferNet class' category: 'ServiciosFinancieros-Solucion'!
TransferNet class
	instanceVariableNames: ''!

!TransferNet class methodsFor: 'instance creation' stamp: 'TV 12/3/2021 01:12:47'!
of: anAccount
	^self new initializeOf: anAccount! !


!classDefinition: #Transfer category: 'ServiciosFinancieros-Solucion'!
Object subclass: #Transfer
	instanceVariableNames: 'value withdrawLeg depositLeg'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ServiciosFinancieros-Solucion'!

!Transfer methodsFor: 'value' stamp: 'LL 9/20/2020 21:13:00'!
value

	^value! !


!Transfer methodsFor: 'accessing' stamp: 'LL 9/20/2020 22:39:46'!
depositLeg

	^depositLeg! !

!Transfer methodsFor: 'accessing' stamp: 'LL 9/20/2020 21:25:56'!
withdrawLeg
	
	^withdrawLeg! !


!Transfer methodsFor: 'initialization' stamp: 'LL 9/20/2020 21:25:21'!
initializeWith: aValue withdrawLeg: aWithdraw depositLeg: aDeposit

	value := aValue.
	withdrawLeg := aWithdraw.
	depositLeg := aDeposit! !

"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!

!classDefinition: 'Transfer class' category: 'ServiciosFinancieros-Solucion'!
Transfer class
	instanceVariableNames: ''!

!Transfer class methodsFor: 'errors' stamp: 'LL 9/20/2020 22:57:30'!
cannotTransferToOriginErrorDescription
	
	^'Transfer destionation cannot be the origin account'! !

!Transfer class methodsFor: 'errors' stamp: 'LL 9/20/2020 23:00:53'!
cannotTransferZeroErrorDescription

	^'Transfer amount should be positive'! !

!Transfer class methodsFor: 'errors' stamp: 'LL 9/20/2020 22:56:35'!
signalCannotTransferToOrigin
	
	self error: self cannotTransferToOriginErrorDescription! !

!Transfer class methodsFor: 'errors' stamp: 'LL 9/20/2020 23:06:17'!
signalCannotTransferZero

	self error: self cannotTransferZeroErrorDescription! !


!Transfer class methodsFor: 'assertions' stamp: 'LL 9/20/2020 23:05:22'!
assert: anAmountOfMoney canBeTransferedTo: destinationAccount from: originAccount

	self assertCanTransferTo: destinationAccount from: originAccount.
	self assertCanTransfer: anAmountOfMoney! !

!Transfer class methodsFor: 'assertions' stamp: 'LL 9/20/2020 23:11:50'!
assertCanTransfer: anAmountOfMoney

	^ anAmountOfMoney isZero ifTrue: [ self signalCannotTransferZero ]! !

!Transfer class methodsFor: 'assertions' stamp: 'LL 9/20/2020 23:04:58'!
assertCanTransferTo: destinationAccount from: originAccount

	^ originAccount = destinationAccount ifTrue: [ self signalCannotTransferToOrigin ]! !


!Transfer class methodsFor: 'instance creation' stamp: 'LL 9/20/2020 23:11:34'!
amount: anAmountOfMoney from: originAccount to: destinationAccount 
	
	| transfer depositLeg withdrawLeg |
	
	self assert: anAmountOfMoney canBeTransferedTo: destinationAccount from: originAccount.
	
	transfer := self new.
	
	withdrawLeg := TransferWithdrawLeg of: transfer on: originAccount.
	depositLeg := TransferDepositLeg of: transfer on: destinationAccount.
	
	^transfer initializeWith: anAmountOfMoney withdrawLeg: withdrawLeg depositLeg: depositLeg
	
	
	! !
